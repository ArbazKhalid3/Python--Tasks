from copy import deepcopy
import numpy as np
import time

def best_solution(state):
    best_sol = []
    count = len(state) - 1
    while count != -1:
        best_sol.insert(0, state[count]['puzzle'])
        count = state[count]['parent']
    return np.array(best_sol).reshape(-1, 3, 3)

def unique_check(new_state, state):
    for s in state:
        if np.array_equal(s['puzzle'], new_state):
            return False
    return True

def misplaced_tiles(puzzle, goal):
    return np.sum(puzzle != goal) - 1

def coordinates(puzzle):
    pos = np.array(range(9))
    for p, q in enumerate(puzzle):
        pos[q] = p
    return pos

def evaluate_misplaced(initial_puzzle, goal):
    steps = [('up', [0, 1, 2], -3), ('down', [6, 7, 8], 3), ('left', [0, 3, 6], -1), ('right', [2, 5, 8], 1)]
    dt_state = [{'puzzle': initial_puzzle, 'parent': -1, 'gn': 0, 'hn': misplaced_tiles(coordinates(initial_puzzle), coordinates(goal))}]
    priority = [(0, dt_state[0]['hn'])]
    
    while priority:
        priority.sort(key=lambda x: (x[1], x[0]))
        position, fn = priority.pop(0)
        puzzle = dt_state[position]['puzzle']
        parent = position
        gn = dt_state[position]['gn'] + 1
        blank = int(np.where(puzzle == 0)[0])

        for move, pos, delta in steps:
            if blank not in pos:
                open_states = deepcopy(puzzle)
                open_states[blank], open_states[blank + delta] = open_states[blank + delta], open_states[blank]

                if unique_check(open_states, dt_state):
                    hn = misplaced_tiles(coordinates(open_states), coordinates(goal))
                    dt_state.append({'puzzle': open_states, 'parent': parent, 'gn': gn, 'hn': hn})
                    priority.append((len(dt_state) - 1, gn + hn))

                    if np.array_equal(open_states, goal):
                        print('The puzzle is solvable\n')
                        return dt_state, len(priority)

    print("The puzzle is unsolvable\n")
    return dt_state, len(priority)

# Initial state (changed)
puzzle=[]
puzzle.append(1)
puzzle.append(2)
puzzle.append(3)
puzzle.append(4)
puzzle.append(5)
puzzle.append(0)
puzzle.append(7)
puzzle.append(8)
puzzle.append(6)
 

# Goal state (changed)
goal=[]
goal.append(1)
goal.append(2)
goal.append(3)
goal.append(4)
goal.append(5)
goal.append(6)
goal.append(7)
goal.append(8)
goal.append(0)


state, visited = evaluate_misplaced(puzzle, goal)
bestpath = bestsolution(state)
print(str(bestpath).replace('[', ' ').replace(']', ''))
totalmoves = len(bestpath) - 1
print('\nSteps to reach goal:',totalmoves)
visit = len(state) - visited
print('Total nodes visited: ',visit, "\n")
Implement A* example other than above example. i.e shortest path of graphs, maps, games. 
import numpy as np
import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position  # (x, y)
        self.parent = parent
        self.g = 0  # Cost from start to this node
        self.h = 0  # Heuristic cost to goal
        self.f = 0  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    # Use Manhattan distance as the heuristic
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(start, goal, grid):
    open_list = []
    closed_list = set()

    start_node = Node(start)
    goal_node = Node(goal)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        # If we reached the goal, reconstruct the path
        if current_node.position == goal:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        closed_list.add(current_node.position)

        # Get neighbors (up, down, left, right)
        neighbors = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        for new_position in neighbors:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])

            # Check if the position is within the grid bounds
            if (0 <= node_position[0] < grid.shape[0]) and (0 <= node_position[1] < grid.shape[1]):
                # Check if the node is walkable (not an obstacle)
                if grid[node_position[0], node_position[1]] != 1 and node_position not in closed_list:
                    neighbor_node = Node(node_position, current_node)
                    neighbor_node.g = current_node.g + 1
                    neighbor_node.h = heuristic(neighbor_node.position, goal_node.position)
                    neighbor_node.f = neighbor_node.g + neighbor_node.h

                    # Check if this neighbor is already in the open list
                    if add_to_open(open_list, neighbor_node):
                        heapq.heappush(open_list, neighbor_node)

    return None  # Path not found

def add_to_open(open_list, neighbor_node):
    for node in open_list:
        if neighbor_node.position == node.position and neighbor_node.g >= node.g:
            return False
    return True

# Example grid (0 = free, 1 = obstacle)
grid = np.array([[0, 0, 0, 0, 0] ,
                 [0, 1, 1, 1, 0],
                 [0, 0, 0, 0, 0],
                 [0, 1, 1, 0, 0],
                 [0, 0, 0, 0, 0]])

start = (0, 0)  # Starting position
goal = (4, 4)   # Goal position

path = astar(start, goal, grid)
if path:
    print("Path found:", path)
else:
    print("No path found.")
